# -*- coding: utf-8 -*-
"""mcwics2020

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LmyLTZAi1A3pPWiW6_kkTz7RcS_v4G9G
"""

from human_estimation import *

hips = user["hips"]
shoulder = user["shoulder"]
body_ratio = user["body_ratio"]
leg = user["legs"]
neck = user["neck"]
tibia = user["tibia"]

class Client():
  ''' defines a Client

  Instance Attributes: sex (str), height (float), waist (float), shoulder (float), torsol_leg_ratio (float), leg (float), neck (float), torsol_to_tibia
  '''
  def __init__(self, sex, height, hips, shoulder, body_ratio, leg, neck, tibia, preferrences):
    self.sex = sex
    self.height = height
    self.hips = hips
    self.shoulder = shoulder
    self.body_ratio = body_ratio
    self.leg = leg
    self.neck = neck
    self.tibia = tibia
    self.preferrences = preferrences


  def fit_preference(self, list_of_dicts):
    properties = list_of_dicts.copy()
    del properties["id"]
    for key in self.preferences:
        if properties[key] not in preferrence[key]:
            eliminate(list_of_dicts["id"])
            break

  def recommendations(self):
    s = ''
    if self.sex == "Women":
      if self.body_ratio > 1:
        s += '- High waisted pants and to avoid long coats\n'
      if self.hips > self.shoulder:
        s += '- Tighter bottoms to show your curves (e.g. skinny jeans, tube skirt, etc) or looser bottoms to hide your curve (e.g. wide leg pants)\n'
      if (self.shoulder - 2) > self.hips:
        s += '- To avoid tight tops and big sleeves tops\n'
    elif self.sex == "Men":
      if self.body_ratio > 1:
        s += '- High waisted pants and to avoid long coats\n'
      if (self.shoulder - 2) <= self.hips <= (self.shoulder + 2):
        s += '- Bulkier tops to enhance your shoulders'
    else:
      s += 'Anything you want! You have a relatively symmetric body'      

    return 'Based on your dimensions, we recommend that you try:\n' + s

def eliminate(ID_num):
    ID_set.discard(ID_num)

all_clothes = open("styles.csv", "r")
clothes_list = all_clothes.readlines()
clean_list = [[] for i in range(len(clothes_list))]

for i in range(len(clothes_list)):
    clothes_list[i] = clothes_list[i].rstrip("\n").split(",")
    clean_list[i] = list()
    clean_list[i].append(clothes_list[i][0])
    clean_list[i].append(clothes_list[i][1])
    clean_list[i].append(clothes_list[i][6])
    clean_list[i].append(clothes_list[i][8])

keys = clean_list[0]

del clean_list[0]

list_of_dicts = [{} for i in range(len(clean_list))]

print(list_of_dicts["usage"].unique())

ID_set = set()

for i in range(len(clean_list)):
    for j in range(len(keys)):
        list_of_dicts[i][keys[j]] = clean_list[i][j]
    ID_set.add(list_of_dicts[i]["id"])


open_images = open("images.csv", "r")

image_lines = open_images.readlines()

image_dict = dict()

for line in image_lines:
  line = line.rstrip("\n").split(",")
  line[0] = line[0].rstrip(".jpg")
  image_dict[line[0]] = line[1]

valid_images = set()

for id_num in image_dict:
  if id_num in ID_set:
    valid_images.add(image_dict[id_num])

# valid_images contains all the URLs of the images to display to the user